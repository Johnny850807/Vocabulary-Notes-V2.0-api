openapi: 3.0.0
info:
  title: members
  version: '1.0'
  description: Admin apis that manage the public dictionaries.
servers:
  - url: 'http://localhost:3000'
paths:
  /api/members/tokens:
    post:
      summary: Create a token
      operationId: post-members-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
              examples: {}
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: integer
                  message:
                    type: string
              examples:
                User name not found:
                  value:
                    error: 0
                    message: The username is not found.
                Password incorrect:
                  value:
                    error: 0
                    message: The password is incorrect.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credentials'
    parameters: []
  '/api/members/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Get member info
      tags: []
      operationId: get-members-id
      requestBody: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/member.v1.yaml
    put:
      summary: Update member basic info
      operationId: put-members-id
      responses:
        '200':
          description: OK
      security:
        - JWT Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/member-put'
  /api/members:
    post:
      summary: Register a member
      operationId: post-members
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/member.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  $ref: ../models/member.v1.yaml
                credentials:
                  $ref: '#/components/schemas/credentials'
              required:
                - member
                - credentials
        description: ''
    parameters: []
  '/api/members/{mid}/own/dictionaries':
    parameters:
      - schema:
          type: integer
        name: mid
        in: path
        required: true
    get:
      summary: Get own dictionaries
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/dictionary.v1.yaml
        '':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/dictionary.v1.yaml
      operationId: get-members-id-dictionaries
      parameters:
        - schema:
            type: integer
            default: '0'
          in: query
          name: offset
        - schema:
            type: integer
            default: INFINITY
          in: query
          name: limit
      description: ''
    post:
      summary: Create own dictionary
      operationId: post-members-id-own-dictionaries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/dictionary.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/dictionary-post.v1.yaml
      security:
        - JWT Token: []
  '/api/members/{mId}/own/dictionaries/{dictId}':
    parameters:
      - schema:
          type: integer
        name: mId
        in: path
        required: true
      - schema:
          type: integer
        name: dictId
        in: path
        required: true
    delete:
      summary: Delete own dictionary
      operationId: delete-members-mId-own-dictionaries-dictId
      responses:
        '200':
          description: OK
    get:
      summary: Get own dictionary
      operationId: get-api-members-mId-own-dictionaries-dictId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/dictionary.v1.yaml
  '/api/members/{mid}/public/wordgroups/{wgId}':
    parameters:
      - schema:
          type: integer
        name: mid
        in: path
        required: true
      - schema:
          type: integer
        name: wgId
        in: path
        required: true
    post:
      summary: Reference a word group from the public dictionary into own dictionary
      operationId: post-members-mid-public-wordgroups-wgId
      responses:
        '200':
          description: OK
    delete:
      summary: Remove a word group from own dictionary
      operationId: delete-members-mid-public-wordgroups-wgId
      responses:
        '200':
          description: OK
  '/api/members/{mid}/own/dictionaries/wordgroups':
    parameters:
      - schema:
          type: string
        name: mid
        in: path
        required: true
    get:
      summary: Get word groups from own dictionary
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/wordgroup.v1.yaml
      operationId: get-members-mid-public-wordgroups
      parameters:
        - schema:
            type: integer
            default: '0'
          in: query
          name: offset
        - schema:
            type: integer
            default: INFINITY
          in: query
          name: limit
      description: ''
  '/api/members/{mid}/tokens':
    parameters:
      - schema:
          type: integer
        name: mid
        in: path
        required: true
    post:
      summary: Renew the token
      operationId: post-api-members-mid-tokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      security:
        - JWT Token: []
  '/api/members/{mid}/public/dictionaries/{dictId}/favorite':
    post:
      summary: Favorite a public dictionary
      operationId: post-api-members-mid-public-dictionaries-dictId-favorite
      responses:
        '200':
          description: OK
components:
  schemas:
    credentials:
      title: credentials
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    token:
      title: token
      type: object
      properties:
        token:
          type: string
        memberId:
          type: integer
        expired:
          type: number
    member-put:
      title: member-put
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 18
        lastName:
          type: string
          minLength: 1
          maxLength: 18
        age:
          type: integer
          minimum: 1
          maximum: 150
      required:
        - firstName
        - lastName
        - age
  securitySchemes:
    JWT Token:
      type: http
      scheme: bearer
      description: ''
